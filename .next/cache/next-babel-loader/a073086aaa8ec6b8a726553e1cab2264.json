{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPostsFromServer, removePostFromServer } from '../api';\nimport { setPosts } from '../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary\n    }\n  });\n});\n\nvar Index = function Index() {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var posts = useSelector(function (state) {\n    return state.posts.posts;\n  });\n\n  var getPosts = function getPosts() {\n    return _regeneratorRuntime.async(function getPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = dispatch;\n            _context.t1 = setPosts;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getPostsFromServer());\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  var removePost = function removePost(id) {\n    return _regeneratorRuntime.async(function removePost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(removePostFromServer(id));\n\n          case 2:\n            getPosts();\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n};\n\nIndex.getInitialProps = function _callee(_ref) {\n  var store, data;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          store = _ref.store;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getPostsFromServer());\n\n        case 3:\n          data = _context3.sent;\n          store.dispatch(setPosts(data));\n          return _context3.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default Index;\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */","map":{"version":3,"sources":["C:/projects/test-blog/pages/index.tsx"],"names":["Layout","useSelector","useDispatch","getPostsFromServer","removePostFromServer","setPosts","makeStyles","createStyles","Grid","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","Index","classes","dispatch","posts","state","getPosts","removePost","id","getInitialProps","store","data"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,SAASC,WAAT,EAAsCC,WAAtC,QAAyD,aAAzD;AAGA,SAEEC,kBAFF,EAGEC,oBAHF,QAIO,QAJP;AAKA,SAASC,QAAT,QAAkC,kBAAlC;AAEA,SAASC,UAAT,EAAqBC,YAArB,QAAgD,0BAAhD;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,IAAMC,SAAS,GAAGH,UAAU,CAAC,UAACI,KAAD;AAAA,SAC3BH,YAAY,CAAC;AACXI,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE;AADN,KADK;AAIXC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,CADJ;AAELC,MAAAA,SAAS,EAAE,QAFN;AAGLC,MAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmBC;AAHrB;AAJI,GAAD,CADe;AAAA,CAAD,CAA5B;;AAaA,IAAMC,KAAe,GAAG,SAAlBA,KAAkB,GAAM;AAC5B,MAAMC,OAAO,GAAGb,SAAS,EAAzB;AAEA,MAAMc,QAAQ,GAAGrB,WAAW,EAA5B;AACA,MAAMsB,KAAK,GAAGvB,WAAW,CAAC,UAACwB,KAAD;AAAA,WAA2BA,KAAK,CAACD,KAAN,CAAYA,KAAvC;AAAA,GAAD,CAAzB;;AAEA,MAAME,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BACfH,QADe;AAAA,0BACNlB,QADM;AAAA;AAAA,6CACSF,kBAAkB,EAD3B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAGA,MAAMwB,UAAU,GAAG,SAAbA,UAAa,CAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACXxB,oBAAoB,CAACwB,EAAD,CADT;;AAAA;AAEjBF,YAAAA,QAAQ;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAKA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACX,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAQD,CAtBD;;AAwBAU,KAAK,CAACQ,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT;AAAA;AAAA,2CACH3B,kBAAkB,EADf;;AAAA;AAChB4B,UAAAA,IADgB;AAEtBD,UAAAA,KAAK,CAACP,QAAN,CAAelB,QAAQ,CAAC0B,IAAD,CAAvB;AAFsB,4CAGf;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAMA,eAAeV,KAAf;AAEA","sourcesContent":["import Layout from '../components/MyLayout';\nimport { useSelector, RootStateOrAny, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { NextPage } from 'next';\nimport {\n  getPostFromServer,\n  getPostsFromServer,\n  removePostFromServer,\n} from '../api';\nimport { setPosts, setPost } from '../store/actions';\nimport { Post } from '../types';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst Index: NextPage = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const posts = useSelector((state: RootStateOrAny) => state.posts.posts);\n\n  const getPosts = async () => {\n    dispatch(setPosts(await getPostsFromServer()));\n  };\n  const removePost = async (id: number | undefined) => {\n    await removePostFromServer(id);\n    getPosts();\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nIndex.getInitialProps = async ({ store }) => {\n  const data = await getPostsFromServer();\n  store.dispatch(setPosts(data));\n  return { data };\n};\n\nexport default Index;\n\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */\n"]},"metadata":{},"sourceType":"module"}