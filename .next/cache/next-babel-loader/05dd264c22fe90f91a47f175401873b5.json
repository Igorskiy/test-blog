{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { getPostFromServer, getPostsFromServer, removePostFromServer } from '../api';\nimport { setPosts, setPost } from '../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    postBody: {\n      margin: 'auto',\n      textAlign: 'justify',\n      maxHeight: '500px',\n      textOverflow: 'ellipsis'\n    },\n    link: {\n      display: 'block',\n      textDecoration: 'none',\n      color: 'black',\n      fontSize: '24px'\n    },\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      marginTop: '20px',\n      padding: '25px',\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n      marginLeft: '20px',\n      marginRight: '20px'\n    }\n  });\n});\n\nvar Index = function Index() {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var posts = useSelector(function (state) {\n    return state.posts.posts;\n  });\n\n  var getPosts = function getPosts() {\n    return _regeneratorRuntime.async(function getPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = dispatch;\n            _context.t1 = setPosts;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getPostsFromServer());\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  var removePost = function removePost(id) {\n    return _regeneratorRuntime.async(function removePost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(removePostFromServer(id));\n\n          case 2:\n            getPosts();\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, posts.map(function (post) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      key: post.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/posts/[id]\",\n      as: \"/posts/\".concat(post.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Paper, {\n      textOverflow: \"ellipsis\",\n      className: classes.paper,\n      onClick: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = dispatch;\n                _context3.t1 = setPost;\n                _context3.next = 4;\n                return _regeneratorRuntime.awrap(getPostFromServer(post.id));\n\n              case 4:\n                _context3.t2 = _context3.sent;\n                _context3.t3 = (0, _context3.t1)(_context3.t2);\n                return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t3));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, _Promise);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: classes.link,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, post.title), __jsx(\"div\", {\n      className: classes.postBody,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, post.body), __jsx(Button, {\n      onClick: function onClick() {\n        return removePost(post.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"delete\"))));\n  }))));\n};\n\nIndex.getInitialProps = function _callee2(_ref) {\n  var store, data;\n  return _regeneratorRuntime.async(function _callee2$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          store = _ref.store;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(getPostsFromServer());\n\n        case 3:\n          data = _context4.sent;\n          store.dispatch(setPosts(data));\n          return _context4.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default Index;\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */","map":{"version":3,"sources":["C:/projects/test-blog/pages/index.tsx"],"names":["Layout","useSelector","useDispatch","Link","getPostFromServer","getPostsFromServer","removePostFromServer","setPosts","setPost","makeStyles","createStyles","Paper","Grid","Button","useStyles","theme","postBody","margin","textAlign","maxHeight","textOverflow","link","display","textDecoration","color","fontSize","root","flexGrow","paper","marginTop","padding","palette","text","primary","outline","cursor","marginLeft","marginRight","Index","classes","dispatch","posts","state","getPosts","removePost","id","map","post","title","body","getInitialProps","store","data"],"mappings":"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","sourcesContent":["import Layout from '../components/MyLayout';\nimport { useSelector, RootStateOrAny, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { NextPage } from 'next';\nimport {\n  getPostFromServer,\n  getPostsFromServer,\n  removePostFromServer,\n} from '../api';\nimport { setPosts, setPost } from '../store/actions';\nimport { Post } from '../types';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    postBody: {\n      margin: 'auto',\n      textAlign: 'justify',\n      maxHeight: '500px',\n      textOverflow: 'ellipsis',\n    },\n    link: {\n      display: 'block',\n      textDecoration: 'none',\n      color: 'black',\n      fontSize: '24px',\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      marginTop: '20px',\n      padding: '25px',\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n      marginLeft: '20px',\n      marginRight: '20px',\n    },\n  }),\n);\n\nconst Index: NextPage = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const posts = useSelector((state: RootStateOrAny) => state.posts.posts);\n\n  const getPosts = async () => {\n    dispatch(setPosts(await getPostsFromServer()));\n  };\n  const removePost = async (id: number | undefined) => {\n    await removePostFromServer(id);\n    getPosts();\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Grid container>\n          {posts.map((post: Post) => (\n            <Grid item xs={12} sm={6} key={post.id}>\n              <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n                <Paper\n                textOverflow=\"ellipsis\"\n                  className={classes.paper}\n                  onClick={async () =>\n                    dispatch(setPost(await getPostFromServer(post.id)))\n                  }\n                >\n                  <a className={classes.link}>{post.title}</a>\n                  <div className={classes.postBody}>{post.body}</div>\n                  <Button\n                    onClick={() => removePost(post.id)}\n                  >{`delete`}</Button>\n                </Paper>\n              </Link>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nIndex.getInitialProps = async ({ store }) => {\n  const data = await getPostsFromServer();\n  store.dispatch(setPosts(data));\n  return { data };\n};\n\nexport default Index;\n\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */\n"]},"metadata":{},"sourceType":"module"}