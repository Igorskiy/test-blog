{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { getPostFromServer, getPostsFromServer, removePostFromServer, test } from '../api';\nimport { setPostsAction, setPost } from '../store/actions';\n\nconst Index = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts.posts);\n\n  const getPosts = async () => {\n    dispatch(setPostsAction((await getPostsFromServer())));\n  };\n\n  const removePost = async id => {\n    await removePostFromServer(id);\n    getPosts();\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Posts\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, posts.map(post => __jsx(\"li\", {\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    onClick: () => removePost(post.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, `delete`), __jsx(Link, {\n    href: \"/posts/[id]\",\n    as: `/posts/${post.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    onClick: async () => dispatch(setPost((await getPostFromServer(post.id)))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, post.title)), post.body)))));\n};\n\nIndex.getInitialProps = async ({\n  store\n}) => {\n  store.dispatch(test());\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/projects/test-blog/pages/index.tsx"],"names":["Layout","useSelector","useDispatch","Link","getPostFromServer","getPostsFromServer","removePostFromServer","test","setPostsAction","setPost","Index","dispatch","posts","state","getPosts","removePost","id","map","post","title","body","getInitialProps","store"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,SAASC,WAAT,EAAsCC,WAAtC,QAAyD,aAAzD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,oBAHF,EAIEC,IAJF,QAKO,QALP;AAMA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,kBAAxC;;AAGA,MAAMC,KAAe,GAAG,MAAM;AAC5B,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,KAAK,GAAGX,WAAW,CAAEY,KAAD,IAA2BA,KAAK,CAACD,KAAN,CAAYA,KAAxC,CAAzB;;AAEA,QAAME,QAAQ,GAAG,YAAY;AAC3BH,IAAAA,QAAQ,CAACH,cAAc,EAAC,MAAMH,kBAAkB,EAAzB,EAAf,CAAR;AACD,GAFD;;AAGA,QAAMU,UAAU,GAAG,MAAOC,EAAP,IAAkC;AACnD,UAAMV,oBAAoB,CAACU,EAAD,CAA1B;AACAF,IAAAA,QAAQ;AACT,GAHD;;AAKA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACK,GAAN,CAAWC,IAAD,IACT;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACF,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,OAAO,EAAE,MAAMD,UAAU,CAACG,IAAI,CAACF,EAAN,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4C,QAA5C,CADF,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,EAAE,EAAG,UAASE,IAAI,CAACF,EAAG,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,OAAO,EAAE,YACPL,QAAQ,CAACF,OAAO,EAAC,MAAML,iBAAiB,CAACc,IAAI,CAACF,EAAN,CAAxB,EAAR,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGE,IAAI,CAACC,KALR,CADF,CAFF,EAWGD,IAAI,CAACE,IAXR,CADF,CADD,CADH,CAFF,CADF;AAwBD,CApCD;;AAsCAV,KAAK,CAACW,eAAN,GAAwB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAA0B;AAC/CA,EAAAA,KAAK,CAACX,QAAN,CAAeJ,IAAI,EAAnB;AACF,CAFD;;AAIA,eAAeG,KAAf","sourcesContent":["import Layout from '../components/MyLayout';\nimport { useSelector, RootStateOrAny, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { NextPage } from 'next';\nimport {\n  getPostFromServer,\n  getPostsFromServer,\n  removePostFromServer,\n  test,\n} from '../api';\nimport { setPostsAction, setPost } from '../store/actions';\nimport { Post } from '../types';\n\nconst Index: NextPage = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state: RootStateOrAny) => state.posts.posts);\n\n  const getPosts = async () => {\n    dispatch(setPostsAction(await getPostsFromServer()));\n  };\n  const removePost = async (id: number | undefined) => {\n    await removePostFromServer(id);\n    getPosts();\n  };\n\n  return (\n    <Layout>\n      <h1>Posts</h1>\n      <ul>\n        {posts.map((post: Post) => (\n          <li key={post.id}>\n            <div>\n              <span onClick={() => removePost(post.id)}>{`delete`}</span>\n              <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n                <a\n                  onClick={async () =>\n                    dispatch(setPost(await getPostFromServer(post.id)))\n                  }\n                >\n                  {post.title}\n                </a>\n              </Link>\n              {post.body}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  );\n};\n\nIndex.getInitialProps = async ({ store }: any) => {\n   store.dispatch(test());\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}