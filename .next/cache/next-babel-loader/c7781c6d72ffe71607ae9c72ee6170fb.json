{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, TextField } from '@material-ui/core';\nconst useStyles = makeStyles(theme => createStyles({\n  textField: {\n    marginTop: '25px',\n    marginBottom: '10px',\n    maxWidth: '60%',\n    justifyContent: 'center'\n  },\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  paper: {\n    minHeight: '60vh',\n    maxWidth: '90vw',\n    marginTop: '20px',\n    marginRight: '20px',\n    marginLeft: '20px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    outline: 'none',\n    cursor: 'pointer'\n  },\n  comment: {\n    display: 'flex',\n    alignItems: 'center',\n    width: 'max-content',\n    paddingTop: '5px',\n    paddingLeft: '15px',\n    paddingRight: '15px',\n    marginTop: '15px',\n    maxWidth: '30vw',\n    minHeight: '50px'\n  },\n  post: {\n    paddingBottom: '20px'\n  },\n  commentTitle: {\n    fontWeight: 'bold',\n    paddingTop: '15px'\n  }\n}));\n\nconst PostPage = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const commentBody = useSelector(state => state.inputs.commentBody);\n  const post = useSelector(state => state.posts.post);\n\n  const addComment = async (postId, commentBody) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost((await getPostFromServer(postId))));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Paper, {\n    className: classes.paper,\n    onClick: async () => dispatch(setPost((await getPostFromServer(post.id))))\n  }, __jsx(Paper, {\n    className: classes.post\n  }, __jsx(\"h1\", null, post.title), __jsx(\"p\", null, post.body)), __jsx(\"div\", null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.commentTitle\n  }, \"Comments:\"), post.comments ? post.comments.map(comment => __jsx(Paper, {\n    key: comment.id,\n    className: classes.comment\n  }, __jsx(\"div\", null, comment.body))) : __jsx(\"div\", null, \"No comments yet\")), __jsx(\"div\", null, __jsx(TextField, {\n    id: \"outlined-multiline-flexible\",\n    className: classes.textField,\n    label: \"New comment\",\n    multiline: true,\n    rowsMax: \"100\",\n    fullWidth: true,\n    placeholder: \"Add your comment here\",\n    value: commentBody,\n    onChange: e => dispatch(setCommentBody(e.target.value)),\n    variant: \"outlined\"\n  })), __jsx(Button, {\n    onClick: () => addComment(post.id, commentBody)\n  }, \"Add new comment\")))));\n};\n\nPostPage.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return {\n    post\n  };\n};\n\nexport default PostPage;","map":null,"metadata":{},"sourceType":"module"}