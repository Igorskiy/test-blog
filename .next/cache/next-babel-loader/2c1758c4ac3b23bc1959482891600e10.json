{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\new.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { sendPostOnServer, getPostsFromServer } from '../../api';\nimport { setPostTitle, setPostBody, setPosts } from '../../store/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    textField: {\n      minWidth: '60%',\n      '& .outlined-textarea': {\n        minHeight: '300px'\n      }\n    },\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      alignItems: 'center',\n      alignContent: 'center',\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200\n      }\n    }\n  });\n});\n\nvar New = function New() {\n  var classes = useStyles();\n  var postsBody = useSelector(function (state) {\n    return state.inputs.postBody;\n  });\n  var postsTitle = useSelector(function (state) {\n    return state.inputs.postTitle;\n  });\n  var dispatch = useDispatch();\n\n  var addNewPost = function addNewPost(title, body) {\n    return _regeneratorRuntime.async(function addNewPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(sendPostOnServer(title, body));\n\n          case 2:\n            dispatch(setPostBody(''));\n            dispatch(setPostTitle(''));\n            _context.t0 = dispatch;\n            _context.t1 = setPosts;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(getPostsFromServer());\n\n          case 8:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(TextField, {\n    id: \"outlined-textarea\",\n    className: classes.textField,\n    defaultValue: postsTitle,\n    placeholder: \"add name for your post\",\n    onChange: function onChange(e) {\n      return dispatch(setPostTitle(e.target.value));\n    },\n    label: \"Title\",\n    multiline: true,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(TextField, {\n    id: \"outlined-multiline-flexible\",\n    className: classes.textField,\n    label: \"Text\",\n    multiline: true,\n    rowsMax: \"30\",\n    placeholder: \"what is on your mind?\",\n    defaultValue: postsBody,\n    onChange: function onChange(e) {\n      return dispatch(setPostBody(e.target.value));\n    },\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return addNewPost(postsTitle, postsBody);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"submit\"))));\n};\n\nexport default New;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/new.tsx"],"names":["Layout","sendPostOnServer","getPostsFromServer","setPostTitle","setPostBody","setPosts","useSelector","useDispatch","Link","createStyles","makeStyles","TextField","Button","useStyles","theme","textField","minWidth","minHeight","root","display","justifyContent","flexDirection","alignItems","alignContent","margin","spacing","width","New","classes","postsBody","state","inputs","postBody","postsTitle","postTitle","dispatch","addNewPost","title","body","e","target","value"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage } from 'next';\nimport { sendPostOnServer, getPostsFromServer } from '../../api';\nimport { setPostTitle, setPostBody, setPosts } from '../../store/actions';\nimport { useSelector, RootStateOrAny, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    textField: {\n      minWidth: '60%',\n      '& .outlined-textarea': {\n        minHeight: '300px',\n      },\n    },\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      alignItems: 'center',\n      alignContent: 'center',\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n  }),\n);\n\nconst New: NextPage = () => {\n  const classes = useStyles();\n\n  const postsBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.postBody,\n  );\n  const postsTitle = useSelector(\n    (state: RootStateOrAny) => state.inputs.postTitle,\n  );\n  const dispatch = useDispatch();\n\n  const addNewPost = async (title: string, body: string) => {\n    await sendPostOnServer(title, body);\n    dispatch(setPostBody(''));\n    dispatch(setPostTitle(''));\n    dispatch(setPosts(await getPostsFromServer()));\n  };\n\n  return (\n    <Layout>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"outlined-textarea\"\n          className={classes.textField}\n          defaultValue={postsTitle}\n          placeholder=\"add name for your post\"\n          onChange={e => dispatch(setPostTitle(e.target.value))}\n          label=\"Title\"\n          multiline\n          variant=\"outlined\"\n        />\n        <TextField\n          id=\"outlined-multiline-flexible\"\n          className={classes.textField}\n          label=\"Text\"\n          multiline\n          rowsMax=\"30\"\n          placeholder=\"what is on your mind?\"\n          defaultValue={postsBody}\n          onChange={e => dispatch(setPostBody(e.target.value))}\n          variant=\"outlined\"\n        />\n        <Link href=\"/\">\n          <Button onClick={() => addNewPost(postsTitle, postsBody)}>\n            submit\n          </Button>\n        </Link>\n      </form>\n    </Layout>\n  );\n};\n\nexport default New;\n"]},"metadata":{},"sourceType":"module"}