{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport withRedux from 'next-redux-wrapper';\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from '../store';\nimport 'typeface-roboto';\n\nconst makeStore = initialStore => {\n  return createStore(reducer, initialStore, composeWithDevTools(applyMiddleware(thunk)));\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["C:/projects/test-blog/pages/_app.tsx"],"names":["withRedux","App","Provider","composeWithDevTools","createStore","applyMiddleware","thunk","reducer","makeStore","initialStore","MyApp","getInitialProps","Component","ctx","pageProps","componentDidMount","jssStyles","document","querySelector","parentElement","removeChild","render","store","props"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAA2D,oBAA3D;AACA,OAAOC,GAAP,MAAgC,UAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,SAAoB,GAAIC,YAAD,IAA6B;AACxD,SAAOL,WAAW,CAChBG,OADgB,EAEhBE,YAFgB,EAGhBN,mBAAmB,CAACE,eAAe,CAACC,KAAD,CAAhB,CAHH,CAAlB;AAKD,CAND;;AAQA,MAAMI,KAAN,SAAoBT,GAApB,CAAyD;AACvD,eAAaU,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAA6D;AAC3D,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GACd,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CADQ,GAEd,EAFJ;AAIA,WAAO;AAAEC,MAAAA;AAAF,KAAP;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAlB;;AACA,QAAIF,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACG,aAAV,CAAwBC,WAAxB,CAAoCJ,SAApC;AACD;AACF;;AACDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,SAAF;AAAaE,MAAAA,SAAb;AAAwBQ,MAAAA;AAAxB,QAAkC,KAAKC,KAA7C;AACA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeR,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD;;AAvBsD;;AA0BzD,eAAed,SAAS,CAACQ,SAAD,CAAT,CAAqBE,KAArB,CAAf","sourcesContent":["import withRedux, { MakeStore, ReduxWrapperAppProps } from 'next-redux-wrapper';\nimport App, { AppContext } from 'next/app';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from '../store';\nimport { RootState } from '../types';\nimport 'typeface-roboto';\n\nconst makeStore: MakeStore = (initialStore: RootState) => {\n  return createStore(\n    reducer,\n    initialStore,\n    composeWithDevTools(applyMiddleware(thunk)),\n  );\n};\n\nclass MyApp extends App<ReduxWrapperAppProps<RootState>> {\n  static async getInitialProps({ Component, ctx }: AppContext) {\n    const pageProps = Component.getInitialProps\n      ? await Component.getInitialProps(ctx)\n      : {};\n\n    return { pageProps };\n  }\n  \n  componentDidMount() {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n  render() {\n    const { Component, pageProps, store } = this.props;\n    return (\n      <Provider store={store}>\n        <Component {...pageProps} />\n      </Provider>\n    );\n  }\n}\n\nexport default withRedux(makeStore)(MyApp);\n"]},"metadata":{},"sourceType":"module"}