{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  posts: [],\n  post: {}\n};\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_POSTS':\n      return _objectSpread({}, state, {\n        posts: action.posts\n      });\n\n    case 'SET_POST':\n      return _objectSpread({}, state, {\n        post: action.post\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Igor/Desktop/test-blog/store/postsReducer.ts"],"names":["initialState","posts","post","postsReducer","state","action","type"],"mappings":";;;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAA2C;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAAjC;;AACF,SAAK,UAAL;AACE,+BAAYG,KAAZ;AAAmBF,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAAhC;;AACF;AACE,aAAOE,KAAP;AANJ;AAQD,CATM","sourcesContent":["import { Actions, Post } from '../types';\n\nconst initialState = {\n  posts: [] as Post[],\n  post: {} as Post,\n};\n\nexport const postsReducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case 'SET_POSTS':\n      return { ...state, posts: action.posts };\n    case 'SET_POST':\n      return { ...state, post: action.post };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}