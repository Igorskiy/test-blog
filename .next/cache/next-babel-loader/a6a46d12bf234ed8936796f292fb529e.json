{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nconst useStyles = makeStyles(theme => createStyles({\n  postBody: {\n    maxWidth: '80%',\n    margin: 'auto',\n    marginTop: '10px',\n    textAlign: 'justify'\n  },\n  link: {\n    display: 'block',\n    textDecoration: 'none',\n    color: 'black',\n    fontSize: '24px'\n  },\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    marginTop: '20px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    outline: 'none',\n    cursor: 'pointer'\n  }\n}));\n\nconst PostPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(state => state.inputs.commentBody);\n  const post = useSelector(state => state.posts.post);\n\n  const addComment = async (postId, commentBody) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost((await getPostFromServer(postId))));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    onClick: async () => dispatch(setPost((await getPostFromServer(post.id)))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, post.body), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, post.comments ? post.comments.map(comment => __jsx(\"div\", {\n    key: comment.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, comment.body)) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"No comments yet\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    cols: 30,\n    rows: 5,\n    placeholder: \"add new comment here\",\n    value: commentBody,\n    onChange: e => dispatch(setCommentBody(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    onClick: () => addComment(post.id, commentBody),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Add new comment\"))))));\n};\n\nPostPage.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return {\n    post\n  };\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","makeStyles","createStyles","Paper","useStyles","theme","postBody","maxWidth","margin","marginTop","textAlign","link","display","textDecoration","color","fontSize","root","flexGrow","paper","padding","spacing","palette","text","primary","outline","cursor","PostPage","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","classes","id","title","body","comments","map","comment","e","target","value","getInitialProps","context","query","store"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    postBody: {\n      maxWidth: '80%',\n      margin: 'auto',\n      marginTop: '10px',\n      textAlign: 'justify',\n    },\n    link: {\n      display: 'block',\n      textDecoration: 'none',\n      color: 'black',\n      fontSize: '24px',\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      marginTop: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n    },\n  }),\n);\n\nconst PostPage: NextPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Paper\n          className={classes.paper}\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n          <div>\n            {post.comments ? (\n              post.comments.map((comment: Comment) => (\n                <div key={comment.id}>{comment.body}</div>\n              ))\n            ) : (\n              <span>No comments yet</span>\n            )}\n            <div>\n              <textarea\n                cols={30}\n                rows={5}\n                placeholder=\"add new comment here\"\n                value={commentBody}\n                onChange={e => dispatch(setCommentBody(e.target.value))}\n              />\n              <span onClick={() => addComment(post.id, commentBody)}>\n                Add new comment\n              </span>\n            </div>\n          </div>\n        </Paper>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}