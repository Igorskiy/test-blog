{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => createStyles({\n  postBody: {\n    maxWidth: '80%',\n    margin: 'auto',\n    marginTop: '10px',\n    textAlign: 'justify'\n  },\n  link: {\n    display: 'block',\n    textDecoration: 'none',\n    color: 'black',\n    fontSize: '24px'\n  },\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    marginTop: '20px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    outline: 'none',\n    cursor: 'pointer'\n  }\n}));\n\nconst PostPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(state => state.inputs.commentBody);\n  const post = useSelector(state => state.posts.post);\n\n  const addComment = async (postId, commentBody) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost((await getPostFromServer(postId))));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, post.body), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, post.comments ? post.comments.map(comment => __jsx(\"div\", {\n    key: comment.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, comment.body)) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"No comments yet\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    cols: 30,\n    rows: 5,\n    placeholder: \"add new comment here\",\n    value: commentBody,\n    onChange: e => dispatch(setCommentBody(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    onClick: () => addComment(post.id, commentBody),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Add new comment\"))));\n};\n\nPostPage.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return {\n    post\n  };\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","makeStyles","createStyles","useStyles","theme","postBody","maxWidth","margin","marginTop","textAlign","link","display","textDecoration","color","fontSize","root","flexGrow","paper","padding","spacing","palette","text","primary","outline","cursor","PostPage","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","title","body","comments","map","comment","id","e","target","value","getInitialProps","context","query","store"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AAEA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,WAAvD;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyD,aAAzD;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,qBAAxC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAgD,0BAAhD;AAKA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,IAC3BF,YAAY,CAAC;AACXG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,KADF;AAERC,IAAAA,MAAM,EAAE,MAFA;AAGRC,IAAAA,SAAS,EAAE,MAHH;AAIRC,IAAAA,SAAS,EAAE;AAJH,GADC;AAOXC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,OADL;AAEJC,IAAAA,cAAc,EAAE,MAFZ;AAGJC,IAAAA,KAAK,EAAE,OAHH;AAIJC,IAAAA,QAAQ,EAAE;AAJN,GAPK;AAaXC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GAbK;AAgBXC,EAAAA,KAAK,EAAE;AACLT,IAAAA,SAAS,EAAE,MADN;AAELU,IAAAA,OAAO,EAAEd,KAAK,CAACe,OAAN,CAAc,CAAd,CAFJ;AAGLV,IAAAA,SAAS,EAAE,QAHN;AAILI,IAAAA,KAAK,EAAET,KAAK,CAACgB,OAAN,CAAcC,IAAd,CAAmBC,OAJrB;AAKLC,IAAAA,OAAO,EAAE,MALJ;AAMLC,IAAAA,MAAM,EAAE;AANH;AAhBI,CAAD,CADc,CAA5B;;AA4BA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAMC,QAAQ,GAAG7B,WAAW,EAA5B;AACA,QAAM8B,WAAW,GAAG7B,WAAW,CAC5B8B,KAAD,IAA2BA,KAAK,CAACC,MAAN,CAAaF,WADX,CAA/B;AAGA,QAAMG,IAAI,GAAGhC,WAAW,CAAE8B,KAAD,IAA2BA,KAAK,CAACG,KAAN,CAAYD,IAAxC,CAAxB;;AAEA,QAAME,UAAU,GAAG,OACjBC,MADiB,EAEjBN,WAFiB,KAGd;AACH,QAAIA,WAAW,CAACO,IAAZ,EAAJ,EAAwB;AACtB,YAAMtC,mBAAmB,CAACqC,MAAD,EAASN,WAAT,CAAzB;AACAD,MAAAA,QAAQ,CAAC1B,OAAO,EAAC,MAAML,iBAAiB,CAACsC,MAAD,CAAxB,EAAR,CAAR;AACAP,MAAAA,QAAQ,CAAC3B,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,KAJD,MAIO;AACLoC,MAAAA,KAAK,CAAE,yCAAF,CAAL;AACD;AACF,GAXD;;AAaA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACM,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIN,IAAI,CAACO,IAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,IAAI,CAACQ,QAAL,GACCR,IAAI,CAACQ,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAChB;AAAK,IAAA,GAAG,EAAEA,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,OAAO,CAACH,IAA/B,CADF,CADD,GAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANJ,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAE,EADR;AAEE,IAAA,IAAI,EAAE,CAFR;AAGE,IAAA,WAAW,EAAC,sBAHd;AAIE,IAAA,KAAK,EAAEV,WAJT;AAKE,IAAA,QAAQ,EAAEe,CAAC,IAAIhB,QAAQ,CAAC3B,cAAc,CAAC2C,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf,CALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AAAM,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAACF,IAAI,CAACW,EAAN,EAAUd,WAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARF,CARF,CAHF,CADF;AA2BD,CA/CD;;AAiDAF,QAAQ,CAACoB,eAAT,GAA2B,gBAAeC,OAAf,EAAyC;AAClE,QAAM;AAAEL,IAAAA;AAAF,MAASK,OAAO,CAACC,KAAvB;AACA,QAAMjB,IAAI,GAAG,MAAMnC,iBAAiB,CAAC,CAAC8C,EAAF,CAApC;AACAK,EAAAA,OAAO,CAACE,KAAR,CAActB,QAAd,CAAuB1B,OAAO,CAAC8B,IAAD,CAA9B;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD,CALD;;AAOA,eAAeL,QAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    postBody: {\n      maxWidth: '80%',\n      margin: 'auto',\n      marginTop: '10px',\n      textAlign: 'justify',\n    },\n    link: {\n      display: 'block',\n      textDecoration: 'none',\n      color: 'black',\n      fontSize: '24px',\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      marginTop: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n    },\n  }),\n);\n\nconst PostPage: NextPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return (\n    <Layout>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n      <div>\n        {post.comments ? (\n          post.comments.map((comment: Comment) => (\n            <div key={comment.id}>{comment.body}</div>\n          ))\n        ) : (\n          <span>No comments yet</span>\n        )}\n        <div>\n          <textarea\n            cols={30}\n            rows={5}\n            placeholder=\"add new comment here\"\n            value={commentBody}\n            onChange={e => dispatch(setCommentBody(e.target.value))}\n          />\n          <span onClick={() => addComment(post.id, commentBody)}>\n            Add new comment\n          </span>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}