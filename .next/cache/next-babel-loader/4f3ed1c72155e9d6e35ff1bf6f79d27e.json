{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  posts: [],\n  post: {}\n};\nexport var postsReducer = function postsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_POSTS':\n      return _objectSpread({}, state, {\n        posts: action.posts\n      });\n\n    case 'SET_POST':\n      return _objectSpread({}, state, {\n        post: action.post\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Igor/Desktop/test-blog/store/postsReducer.ts"],"names":["initialState","posts","post","postsReducer","state","action","type"],"mappings":";;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAA2C;AAAA,MAA1CC,KAA0C,uEAAlCJ,YAAkC;AAAA,MAApBK,MAAoB;;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAAjC;;AACF,SAAK,UAAL;AACE,+BAAYG,KAAZ;AAAmBF,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAAhC;;AACF;AACE,aAAOE,KAAP;AANJ;AAQD,CATM","sourcesContent":["import { Actions, Post } from '../types';\n\nconst initialState = {\n  posts: [] as Post[],\n  post: {} as Post,\n};\n\nexport const postsReducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case 'SET_POSTS':\n      return { ...state, posts: action.posts };\n    case 'SET_POST':\n      return { ...state, post: action.post };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}