{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { useEffect } from 'react';\n\nconst PostPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(state => state.inputs.commentBody);\n  const post = useSelector(state => state.posts.post);\n\n  const addComment = async (postId, commentBody) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost((await getPostFromServer(postId))));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  useEffect(() => {\n    const getPost = async () => {\n      dispatch(setPost);\n    };\n  });\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, post.body), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, post.comments ? post.comments.map(comment => __jsx(\"div\", {\n    key: comment.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, comment.body)) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"No comments yet\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    cols: 30,\n    rows: 5,\n    placeholder: \"add new comment here\",\n    value: commentBody,\n    onChange: e => dispatch(setCommentBody(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    onClick: () => addComment(post.id, commentBody),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Add new comment\"))));\n};\n\nPostPage.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const post = await getPostFromServer(+id);\n  return {\n    post\n  };\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","useEffect","PostPage","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","getPost","title","body","comments","map","comment","id","e","target","value","getInitialProps","context","query"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AAEA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,WAAvD;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyD,aAAzD;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,qBAAxC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,WAAW,GAAGN,WAAW,CAC5BO,KAAD,IAA2BA,KAAK,CAACC,MAAN,CAAaF,WADX,CAA/B;AAGA,QAAMG,IAAI,GAAGT,WAAW,CAAEO,KAAD,IAA2BA,KAAK,CAACG,KAAN,CAAYD,IAAxC,CAAxB;;AAEA,QAAME,UAAU,GAAG,OACjBC,MADiB,EAEjBN,WAFiB,KAGd;AACH,QAAIA,WAAW,CAACO,IAAZ,EAAJ,EAAwB;AACtB,YAAMf,mBAAmB,CAACc,MAAD,EAASN,WAAT,CAAzB;AACAD,MAAAA,QAAQ,CAACH,OAAO,EAAC,MAAML,iBAAiB,CAACe,MAAD,CAAxB,EAAR,CAAR;AACAP,MAAAA,QAAQ,CAACJ,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,KAJD,MAIO;AACLa,MAAAA,KAAK,CAAE,yCAAF,CAAL;AACD;AACF,GAXD;;AAaAX,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMY,OAAO,GAAG,YAAU;AACxBV,MAAAA,QAAQ,CAACH,OAAD,CAAR;AACD,KAFD;AAGD,GAJQ,CAAT;AAMA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKO,IAAI,CAACO,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIP,IAAI,CAACQ,IAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,IAAI,CAACS,QAAL,GACCT,IAAI,CAACS,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAChB;AAAK,IAAA,GAAG,EAAEA,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,OAAO,CAACH,IAA/B,CADF,CADD,GAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANJ,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAE,EADR;AAEE,IAAA,IAAI,EAAE,CAFR;AAGE,IAAA,WAAW,EAAC,sBAHd;AAIE,IAAA,KAAK,EAAEX,WAJT;AAKE,IAAA,QAAQ,EAAEgB,CAAC,IAAIjB,QAAQ,CAACJ,cAAc,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf,CALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AAAM,IAAA,OAAO,EAAE,MAAMb,UAAU,CAACF,IAAI,CAACY,EAAN,EAAUf,WAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARF,CARF,CAHF,CADF;AA2BD,CArDD;;AAuDAF,QAAQ,CAACqB,eAAT,GAA2B,gBAAeC,OAAf,EAAyC;AAClE,QAAM;AAAEL,IAAAA;AAAF,MAASK,OAAO,CAACC,KAAvB;AACA,QAAMlB,IAAI,GAAG,MAAMZ,iBAAiB,CAAC,CAACwB,EAAF,CAApC;AACA,SAAO;AAAEZ,IAAAA;AAAF,GAAP;AACD,CAJD;;AAMA,eAAeL,QAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { useEffect } from 'react';\n\nconst PostPage: NextPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  useEffect(()=>{\n    const getPost = async()=> {\n      dispatch(setPost)\n    }\n  })\n\n  return (\n    <Layout>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n      <div>\n        {post.comments ? (\n          post.comments.map((comment: Comment) => (\n            <div key={comment.id}>{comment.body}</div>\n          ))\n        ) : (\n          <span>No comments yet</span>\n        )}\n        <div>\n          <textarea\n            cols={30}\n            rows={5}\n            placeholder=\"add new comment here\"\n            value={commentBody}\n            onChange={e => dispatch(setCommentBody(e.target.value))}\n          />\n          <span onClick={() => addComment(post.id, commentBody)}>\n            Add new comment\n          </span>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}