{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, TextField } from '@material-ui/core';\nconst useStyles = makeStyles(theme => createStyles({\n  textField: {\n    marginTop: '10px',\n    marginBottom: '10px',\n    maxWidth: '60%',\n    justifyContent: 'center'\n  },\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  paper: {\n    minHeight: '60vh',\n    maxWidth: '90vw',\n    marginTop: '20px',\n    marginRight: '20px',\n    marginLeft: '20px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    outline: 'none',\n    cursor: 'pointer'\n  },\n  comment: {\n    display: 'flex',\n    width: 'max-content',\n    paddingLeft: '15px',\n    paddingRight: '15px',\n    marginTop: '15px',\n    maxWidth: '30vw',\n    minHeight: '50px'\n  }\n}));\n\nconst PostPage = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const commentBody = useSelector(state => state.inputs.commentBody);\n  const post = useSelector(state => state.posts.post);\n\n  const addComment = async (postId, commentBody) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost((await getPostFromServer(postId))));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    onClick: async () => dispatch(setPost((await getPostFromServer(post.id)))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, post.body)), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Comments:\"), post.comments ? post.comments.map(comment => __jsx(Paper, {\n    key: comment.id,\n    className: classes.comment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, comment.body))) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"No comments yet\")), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(TextField, {\n    id: \"outlined-multiline-flexible\",\n    className: classes.textField,\n    label: \"New comment\",\n    multiline: true,\n    rowsMax: \"100\",\n    fullWidth: true,\n    placeholder: \"Add your comment here\",\n    defaultValue: commentBody,\n    onChange: e => dispatch(setCommentBody(e.target.value)),\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), __jsx(Button, {\n    onClick: () => addComment(post.id, commentBody),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Add new comment\")))));\n};\n\nPostPage.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return {\n    post\n  };\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","makeStyles","createStyles","Paper","Button","TextField","useStyles","theme","textField","marginTop","marginBottom","maxWidth","justifyContent","root","flexGrow","display","alignItems","paper","minHeight","marginRight","marginLeft","padding","spacing","textAlign","color","palette","text","primary","outline","cursor","comment","width","paddingLeft","paddingRight","PostPage","classes","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","id","title","body","comments","map","e","target","value","getInitialProps","context","query","store"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, TextField } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    textField: {\n      marginTop: '10px',\n      marginBottom: '10px',\n      maxWidth: '60%',\n      justifyContent: 'center',\n    },\n    root: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    paper: {\n      minHeight: '60vh',\n      maxWidth: '90vw',\n      marginTop: '20px',\n      marginRight: '20px',\n      marginLeft: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n    },\n    comment: {\n      display: 'flex',\n      \n      width: 'max-content',\n      paddingLeft: '15px',\n      paddingRight: '15px',\n      marginTop: '15px',\n      maxWidth: '30vw',\n      minHeight: '50px',\n    },\n  }),\n);\n\nconst PostPage: NextPage = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Paper\n          className={classes.paper}\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          <div>\n            <h1>{post.title}</h1>\n            <p>{post.body}</p>\n          </div>\n          <div>\n            <div>\n              <span>Comments:</span>\n              {post.comments ? (\n                post.comments.map((comment: Comment) => (\n                  <Paper key={comment.id} className={classes.comment}>\n                    <div>{comment.body}</div>\n                  </Paper>\n                ))\n              ) : (\n                <div>No comments yet</div>\n              )}\n            </div>\n            <div>\n              <TextField\n                id=\"outlined-multiline-flexible\"\n                className={classes.textField}\n                label=\"New comment\"\n                multiline\n                rowsMax=\"100\"\n                fullWidth\n                placeholder=\"Add your comment here\"\n                defaultValue={commentBody}\n                onChange={e => dispatch(setCommentBody(e.target.value))}\n                variant=\"outlined\"\n              />\n            </div>\n            <Button onClick={() => addComment(post.id, commentBody)}>\n              Add new comment\n            </Button>\n          </div>\n        </Paper>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}