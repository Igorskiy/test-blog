{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { getPostFromServer, getPostsFromServer, removePostFromServer } from '../api';\nimport { setPosts, setPost } from '../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\nconst useStyles = makeStyles(theme => createStyles({\n  postBody: {\n    maxWidth: '80%',\n    margin: 'auto',\n    marginTop: '10px',\n    marginLeft: '20px',\n    textAlign: 'justify'\n  },\n  link: {\n    display: 'block',\n    textDecoration: 'none',\n    color: 'black',\n    fontSize: '24px'\n  },\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    marginTop: '20px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    outline: 'none',\n    cursor: 'pointer'\n  }\n}));\n\nconst Index = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts.posts);\n\n  const getPosts = async () => {\n    dispatch(setPosts((await getPostsFromServer())));\n  };\n\n  const removePost = async id => {\n    await removePostFromServer(id);\n    getPosts();\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, posts.map(post => __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: \"/posts/[id]\",\n    as: `/posts/${post.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    onClick: async () => dispatch(setPost((await getPostFromServer(post.id)))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: classes.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, post.title), __jsx(\"div\", {\n    className: classes.postBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, post.body), __jsx(Button, {\n    onClick: () => removePost(post.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, `delete`))))))));\n};\n\nIndex.getInitialProps = async ({\n  store\n}) => {\n  const data = await getPostsFromServer();\n  store.dispatch(setPosts(data));\n  return {\n    data\n  };\n};\n\nexport default Index;\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */","map":{"version":3,"sources":["C:/projects/test-blog/pages/index.tsx"],"names":["Layout","useSelector","useDispatch","Link","getPostFromServer","getPostsFromServer","removePostFromServer","setPosts","setPost","makeStyles","createStyles","Paper","Grid","Button","useStyles","theme","postBody","maxWidth","margin","marginTop","marginLeft","textAlign","link","display","textDecoration","color","fontSize","root","flexGrow","paper","padding","spacing","palette","text","primary","outline","cursor","Index","classes","dispatch","posts","state","getPosts","removePost","id","map","post","title","body","getInitialProps","store","data"],"mappings":"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","sourcesContent":["import Layout from '../components/MyLayout';\nimport { useSelector, RootStateOrAny, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { NextPage } from 'next';\nimport {\n  getPostFromServer,\n  getPostsFromServer,\n  removePostFromServer,\n} from '../api';\nimport { setPosts, setPost } from '../store/actions';\nimport { Post } from '../types';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    postBody: {\n      maxWidth: '80%',\n      margin: 'auto',\n      marginTop: '10px',\n      marginLeft: '20px',\n      textAlign: 'justify',\n    },\n    link: {\n      display: 'block',\n      textDecoration: 'none',\n      color: 'black',\n      fontSize: '24px',\n    },\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      marginTop: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n    },\n  }),\n);\n\nconst Index: NextPage = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const posts = useSelector((state: RootStateOrAny) => state.posts.posts);\n\n  const getPosts = async () => {\n    dispatch(setPosts(await getPostsFromServer()));\n  };\n  const removePost = async (id: number | undefined) => {\n    await removePostFromServer(id);\n    getPosts();\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          {posts.map((post: Post) => (\n            <Grid item xs={12} sm={6} key={post.id}>\n              <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n                <Paper\n                  className={classes.paper}\n                  onClick={async () =>\n                    dispatch(setPost(await getPostFromServer(post.id)))\n                  }\n                >\n                  <a className={classes.link}>{post.title}</a>\n                  <div className={classes.postBody}>{post.body}</div>\n                  <Button\n                    onClick={() => removePost(post.id)}\n                  >{`delete`}</Button>\n                </Paper>\n              </Link>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n\nIndex.getInitialProps = async ({ store }) => {\n  const data = await getPostsFromServer();\n  store.dispatch(setPosts(data));\n  return { data };\n};\n\nexport default Index;\n\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */\n"]},"metadata":{},"sourceType":"module"}