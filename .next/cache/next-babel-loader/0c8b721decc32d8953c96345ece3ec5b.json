{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport withRedux from 'next-redux-wrapper';\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from '../store';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'typeface-roboto';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from '../src/theme';\n\nconst makeStore = initialStore => {\n  return createStore(reducer, initialStore, composeWithDevTools(applyMiddleware(thunk)));\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles && jssStyles.parentElement) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My blog\"), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n    })), __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(CssBaseline, null), __jsx(Provider, {\n      store: store\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nexport default withRedux(makeStore)(MyApp);","map":null,"metadata":{},"sourceType":"module"}