{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nexport var baseURL = 'https://simple-blog-api.crew.red';\nexport var api = axios.create({\n  baseURL: baseURL,\n  timeout: 1000,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\nexport var getPostFromServer = function getPostFromServer(postId) {\n  var data;\n  return _regeneratorRuntime.async(function getPostFromServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(api.get(baseURL + '/posts/' + postId + '?_embed=comments').then(function (_ref) {\n            var data = _ref.data;\n            return data;\n          }));\n\n        case 2:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var sendCommentOnServer = function sendCommentOnServer(postId, commentBody) {\n  return _regeneratorRuntime.async(function sendCommentOnServer$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(api.post(baseURL + '/comments', {\n            postId: postId,\n            body: commentBody\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var sendPostOnServer = function sendPostOnServer(title, body) {\n  return _regeneratorRuntime.async(function sendPostOnServer$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(api.post(baseURL + '/posts', {\n            title: title,\n            body: body\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var getPostsFromServer = function getPostsFromServer() {\n  var data;\n  return _regeneratorRuntime.async(function getPostsFromServer$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(api.get(baseURL + '/posts').then(function (_ref2) {\n            var data = _ref2.data;\n            return data;\n          }));\n\n        case 2:\n          data = _context4.sent;\n          return _context4.abrupt(\"return\", data);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var removePostFromServer = function removePostFromServer(id) {\n  return _regeneratorRuntime.async(function removePostFromServer$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(api[\"delete\"](baseURL + '/posts/' + id));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var test = function test() {\n  return d;\n};","map":{"version":3,"sources":["C:/projects/test-blog/api.ts"],"names":["axios","baseURL","api","create","timeout","headers","getPostFromServer","postId","get","then","data","sendCommentOnServer","commentBody","post","body","sendPostOnServer","title","getPostsFromServer","removePostFromServer","id","test","d"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,OAAO,GAAG,kCAAhB;AAEP,OAAO,IAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC9BF,EAAAA,OAAO,EAAPA,OAD8B;AAE9BG,EAAAA,OAAO,EAAE,IAFqB;AAG9BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAHqB,CAAb,CAAZ;AAQP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACZL,GAAG,CACnBM,GADgB,CACZP,OAAO,GAAG,SAAV,GAAsBM,MAAtB,GAA+B,kBADnB,EAEhBE,IAFgB,CAEX;AAAA,gBAAGC,IAAH,QAAGA,IAAH;AAAA,mBAAcA,IAAd;AAAA,WAFW,CADY;;AAAA;AACzBA,UAAAA,IADyB;AAAA,2CAIxBA,IAJwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;AAOP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCJ,MADiC,EAEjCK,WAFiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAI3BV,GAAG,CAACW,IAAJ,CAASZ,OAAO,GAAG,WAAnB,EAAgC;AAAEM,YAAAA,MAAM,EAANA,MAAF;AAAUO,YAAAA,IAAI,EAAEF;AAAhB,WAAhC,CAJ2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;AAMP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,KAAP,EAAsBF,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACxBZ,GAAG,CAACW,IAAJ,CAASZ,OAAO,GAAG,QAAnB,EAA6B;AAAEe,YAAAA,KAAK,EAALA,KAAF;AAASF,YAAAA,IAAI,EAAJA;AAAT,WAA7B,CADwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAIP,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACbf,GAAG,CAACM,GAAJ,CAAQP,OAAO,GAAG,QAAlB,EAA4BQ,IAA5B,CAAiC;AAAA,gBAAGC,IAAH,SAAGA,IAAH;AAAA,mBAAcA,IAAd;AAAA,WAAjC,CADa;;AAAA;AAC1BA,UAAAA,IAD0B;AAAA,4CAEzBA,IAFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAKP,OAAO,IAAMQ,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC5BjB,GAAG,UAAH,CAAWD,OAAO,GAAG,SAAV,GAAsBkB,EAAjC,CAD4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;AAGP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,SAClBC,CADkB;AAAA,CAAb","sourcesContent":["import axios from 'axios';\nexport const baseURL = 'https://simple-blog-api.crew.red';\n\nexport const api = axios.create({\n  baseURL,\n  timeout: 1000,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n  },\n});\n\nexport const getPostFromServer = async (postId: number | undefined) => {\n  const data = await api\n    .get(baseURL + '/posts/' + postId + '?_embed=comments')\n    .then(({ data }) => data);\n  return data;\n};\n\nexport const sendCommentOnServer = async (\n  postId: number | undefined,\n  commentBody: string,\n) => {\n  await api.post(baseURL + '/comments', { postId, body: commentBody });\n};\nexport const sendPostOnServer = async (title: string, body: string) => {\n  await api.post(baseURL + '/posts', { title, body });\n};\n\nexport const getPostsFromServer = async () => {\n  const data = await api.get(baseURL + '/posts').then(({ data }) => data);\n  return data;\n};\n\nexport const removePostFromServer = async (id: number | undefined) => {\n  await api.delete(baseURL + '/posts/' + id);\n};\nexport const test = () =>(\n  d\n)"]},"metadata":{},"sourceType":"module"}