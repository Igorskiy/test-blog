{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { useEffect } from 'react';\n\nvar PostPage = function PostPage() {\n  var dispatch = useDispatch();\n  var commentBody = useSelector(function (state) {\n    return state.inputs.commentBody;\n  });\n  var post = useSelector(function (state) {\n    return state.posts.post;\n  });\n\n  var addComment = function addComment(postId, commentBody) {\n    return _regeneratorRuntime.async(function addComment$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!commentBody.trim()) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(sendCommentOnServer(postId, commentBody));\n\n          case 3:\n            _context.t0 = dispatch;\n            _context.t1 = setPost;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(getPostFromServer(postId));\n\n          case 7:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n            dispatch(setCommentBody(''));\n            _context.next = 14;\n            break;\n\n          case 13:\n            alert(\"Your comment is empty, please, fill it.\");\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  useEffect(function () {\n    var getPost = function getPost() {\n      return _regeneratorRuntime.async(function getPost$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = dispatch;\n              _context2.t1 = setPost;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(get);\n\n            case 4:\n              _context2.t2 = _context2.sent;\n              _context2.t3 = (0, _context2.t1)(_context2.t2);\n              (0, _context2.t0)(_context2.t3);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, _Promise);\n    };\n  });\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, post.body), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, post.comments ? post.comments.map(function (comment) {\n    return __jsx(\"div\", {\n      key: comment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, comment.body);\n  }) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"No comments yet\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    cols: 30,\n    rows: 5,\n    placeholder: \"add new comment here\",\n    value: commentBody,\n    onChange: function onChange(e) {\n      return dispatch(setCommentBody(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    onClick: function onClick() {\n      return addComment(post.id, commentBody);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Add new comment\"))));\n};\n\nPostPage.getInitialProps = function _callee(context) {\n  var id, post;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = context.query.id;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getPostFromServer(+id));\n\n        case 3:\n          post = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            post: post\n          });\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","useEffect","PostPage","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","getPost","get","title","body","comments","map","comment","id","e","target","value","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { useEffect } from 'react';\n\nconst PostPage: NextPage = () => {\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  useEffect(()=>{\n    const getPost = async()=> {\n      dispatch(setPost(await get))\n    }\n  })\n\n  return (\n    <Layout>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n      <div>\n        {post.comments ? (\n          post.comments.map((comment: Comment) => (\n            <div key={comment.id}>{comment.body}</div>\n          ))\n        ) : (\n          <span>No comments yet</span>\n        )}\n        <div>\n          <textarea\n            cols={30}\n            rows={5}\n            placeholder=\"add new comment here\"\n            value={commentBody}\n            onChange={e => dispatch(setCommentBody(e.target.value))}\n          />\n          <span onClick={() => addComment(post.id, commentBody)}>\n            Add new comment\n          </span>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}