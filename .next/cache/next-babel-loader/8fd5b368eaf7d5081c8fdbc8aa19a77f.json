{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Button } from '@material-ui/core';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    flexGrow: 1,\n    display: 'flex'\n  },\n  paper: {\n    minHeight: '60vh',\n    marginTop: '20px',\n    marginRight: '20px',\n    marginLeft: '20px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.primary,\n    outline: 'none',\n    cursor: 'pointer'\n  }\n}));\n\nconst PostPage = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const commentBody = useSelector(state => state.inputs.commentBody);\n  const post = useSelector(state => state.posts.post);\n\n  const addComment = async (postId, commentBody) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost((await getPostFromServer(postId))));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    onClick: async () => dispatch(setPost((await getPostFromServer(post.id)))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, post.body), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, post.comments ? post.comments.map(comment => __jsx(\"div\", {\n    key: comment.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, comment.body)) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"No comments yet\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    cols: 30,\n    rows: 5,\n    placeholder: \"add new comment here\",\n    value: commentBody,\n    onChange: e => dispatch(setCommentBody(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(Button, {\n    onClick: () => addComment(post.id, commentBody),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Add new comment\"))))));\n};\n\nPostPage.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return {\n    post\n  };\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","makeStyles","createStyles","Paper","Button","useStyles","theme","root","flexGrow","display","paper","minHeight","marginTop","marginRight","marginLeft","padding","spacing","textAlign","color","palette","text","primary","outline","cursor","PostPage","classes","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","id","title","body","comments","map","comment","e","target","value","getInitialProps","context","query","store"],"mappings":"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","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      display: 'flex',\n    },\n    paper: {\n      minHeight: '60vh',\n      marginTop: '20px',\n      marginRight: '20px',\n      marginLeft: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n    },\n  }),\n);\n\nconst PostPage: NextPage = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Paper\n          className={classes.paper}\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n          <div>\n            {post.comments ? (\n              post.comments.map((comment: Comment) => (\n                <div key={comment.id}>{comment.body}</div>\n              ))\n            ) : (\n              <span>No comments yet</span>\n            )}\n            <div>\n              <textarea\n                cols={30}\n                rows={5}\n                placeholder=\"add new comment here\"\n                value={commentBody}\n                onChange={e => dispatch(setCommentBody(e.target.value))}\n              />\n              <Button onClick={() => addComment(post.id, commentBody)}>\n                Add new comment\n              </Button>\n            </div>\n          </div>\n        </Paper>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}