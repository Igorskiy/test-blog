{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { getPostFromServer, getPostsFromServer, removePostFromServer } from '../api';\nimport { setPosts, setPost } from '../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    postBody: {\n      display: 'box',\n      margin: 'auto',\n      textAlign: 'justify',\n      maxHeight: '500px',\n      overflow: 'hidden',\n      lineClamp: 5,\n      boxOrient: 'vertical'\n    },\n    link: {\n      display: 'block',\n      textDecoration: 'none',\n      color: 'black',\n      fontSize: '24px'\n    },\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      marginTop: '20px',\n      padding: '25px',\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n      marginLeft: '20px',\n      marginRight: '20px'\n    }\n  });\n});\n\nvar Index = function Index() {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var posts = useSelector(function (state) {\n    return state.posts.posts;\n  });\n\n  var getPosts = function getPosts() {\n    return _regeneratorRuntime.async(function getPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = dispatch;\n            _context.t1 = setPosts;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getPostsFromServer());\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  var removePost = function removePost(id) {\n    return _regeneratorRuntime.async(function removePost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(removePostFromServer(id));\n\n          case 2:\n            getPosts();\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true\n  }, posts.map(function (post) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      key: post.id\n    }, __jsx(Link, {\n      href: \"/posts/[id]\",\n      as: \"/posts/\".concat(post.id)\n    }, __jsx(Paper, {\n      className: classes.paper,\n      onClick: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = dispatch;\n                _context3.t1 = setPost;\n                _context3.next = 4;\n                return _regeneratorRuntime.awrap(getPostFromServer(post.id));\n\n              case 4:\n                _context3.t2 = _context3.sent;\n                _context3.t3 = (0, _context3.t1)(_context3.t2);\n                return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t3));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, _Promise);\n      }\n    }, __jsx(\"a\", {\n      className: classes.link\n    }, post.title), __jsx(Typography, {\n      className: classes.postBody\n    }, post.body), __jsx(Button, {\n      onClick: function onClick() {\n        return removePost(post.id);\n      }\n    }, \"delete\"))));\n  }))));\n};\n\nIndex.getInitialProps = function _callee2(_ref) {\n  var store, data;\n  return _regeneratorRuntime.async(function _callee2$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          store = _ref.store;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(getPostsFromServer());\n\n        case 3:\n          data = _context4.sent;\n          store.dispatch(setPosts(data));\n          return _context4.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default Index;\n/* {posts.map((post: Post) => (\n  <div key={post.id}>\n    <div>\n      <span onClick={() => removePost(post.id)}>{`delete`}</span>\n      <Link href=\"/posts/[id]\" as={`/posts/${post.id}`}>\n        <a\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          {post.title}\n        </a>\n      </Link>\n      {post.body}\n    </div>\n  </div> */","map":null,"metadata":{},"sourceType":"module"}