{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\projects\\\\test-blog\\\\pages\\\\posts\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, TextField } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    textField: {\n      maxWidth: '60%',\n      justifyContent: 'center'\n    },\n    root: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    paper: {\n      display: 'flex',\n      flexFlow: 'column no',\n      minHeight: '60vh',\n      maxWidth: '90vw',\n      marginTop: '20px',\n      marginRight: '20px',\n      marginLeft: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer'\n    }\n  });\n});\n\nvar PostPage = function PostPage() {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var commentBody = useSelector(function (state) {\n    return state.inputs.commentBody;\n  });\n  var post = useSelector(function (state) {\n    return state.posts.post;\n  });\n\n  var addComment = function addComment(postId, commentBody) {\n    return _regeneratorRuntime.async(function addComment$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!commentBody.trim()) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(sendCommentOnServer(postId, commentBody));\n\n          case 3:\n            _context.t0 = dispatch;\n            _context.t1 = setPost;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(getPostFromServer(postId));\n\n          case 7:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n            dispatch(setCommentBody(''));\n            _context.next = 14;\n            break;\n\n          case 13:\n            alert(\"Your comment is empty, please, fill it.\");\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    onClick: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = dispatch;\n              _context2.t1 = setPost;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(getPostFromServer(post.id));\n\n            case 4:\n              _context2.t2 = _context2.sent;\n              _context2.t3 = (0, _context2.t1)(_context2.t2);\n              return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t3));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, _Promise);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, post.body), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, post.comments ? post.comments.map(function (comment) {\n    return __jsx(\"div\", {\n      key: comment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, comment.body);\n  }) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"No comments yet\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(TextField, {\n    id: \"outlined-multiline-flexible\",\n    className: classes.textField,\n    label: \"New comment\",\n    multiline: true,\n    rowsMax: \"100\",\n    fullWidth: true,\n    placeholder: \"Add your comment here\",\n    defaultValue: commentBody,\n    onChange: function onChange(e) {\n      return dispatch(setCommentBody(e.target.value));\n    },\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(Button, {\n    onClick: function onClick() {\n      return addComment(post.id, commentBody);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Add new comment\"))))));\n};\n\nPostPage.getInitialProps = function _callee2(context) {\n  var id, post;\n  return _regeneratorRuntime.async(function _callee2$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = context.query.id;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getPostFromServer(+id));\n\n        case 3:\n          post = _context3.sent;\n          context.store.dispatch(setPost(post));\n          return _context3.abrupt(\"return\", {\n            post: post\n          });\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/projects/test-blog/pages/posts/[id].tsx"],"names":["Layout","getPostFromServer","sendCommentOnServer","useDispatch","useSelector","setCommentBody","setPost","makeStyles","createStyles","Paper","Button","TextField","useStyles","theme","textField","maxWidth","justifyContent","root","flexGrow","display","alignItems","paper","flexFlow","minHeight","marginTop","marginRight","marginLeft","padding","spacing","textAlign","color","palette","text","primary","outline","cursor","PostPage","classes","dispatch","commentBody","state","inputs","post","posts","addComment","postId","trim","alert","id","title","body","comments","map","comment","e","target","value","getInitialProps","context","query","store"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AAEA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,WAAvD;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyD,aAAzD;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,qBAAxC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAgD,0BAAhD;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;AAEA,IAAMC,SAAS,GAAGL,UAAU,CAAC,UAACM,KAAD;AAAA,SAC3BL,YAAY,CAAC;AACXM,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,KADD;AAETC,MAAAA,cAAc,EAAE;AAFP,KADA;AAKXC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,CADN;AAEJC,MAAAA,OAAO,EAAE,MAFL;AAGJH,MAAAA,cAAc,EAAE,QAHZ;AAIJI,MAAAA,UAAU,EAAE;AAJR,KALK;AAWXC,IAAAA,KAAK,EAAE;AACLF,MAAAA,OAAO,EAAE,MADJ;AAELG,MAAAA,QAAQ,EAAE,WAFL;AAGLC,MAAAA,SAAS,EAAE,MAHN;AAILR,MAAAA,QAAQ,EAAE,MAJL;AAKLS,MAAAA,SAAS,EAAE,MALN;AAMLC,MAAAA,WAAW,EAAE,MANR;AAOLC,MAAAA,UAAU,EAAE,MAPP;AAQLC,MAAAA,OAAO,EAAEd,KAAK,CAACe,OAAN,CAAc,CAAd,CARJ;AASLC,MAAAA,SAAS,EAAE,QATN;AAULC,MAAAA,KAAK,EAAEjB,KAAK,CAACkB,OAAN,CAAcC,IAAd,CAAmBC,OAVrB;AAWLC,MAAAA,OAAO,EAAE,MAXJ;AAYLC,MAAAA,MAAM,EAAE;AAZH;AAXI,GAAD,CADe;AAAA,CAAD,CAA5B;;AA6BA,IAAMC,QAAkB,GAAG,SAArBA,QAAqB,GAAM;AAC/B,MAAMC,OAAO,GAAGzB,SAAS,EAAzB;AAEA,MAAM0B,QAAQ,GAAGnC,WAAW,EAA5B;AACA,MAAMoC,WAAW,GAAGnC,WAAW,CAC7B,UAACoC,KAAD;AAAA,WAA2BA,KAAK,CAACC,MAAN,CAAaF,WAAxC;AAAA,GAD6B,CAA/B;AAGA,MAAMG,IAAI,GAAGtC,WAAW,CAAC,UAACoC,KAAD;AAAA,WAA2BA,KAAK,CAACG,KAAN,CAAYD,IAAvC;AAAA,GAAD,CAAxB;;AAEA,MAAME,UAAU,GAAG,SAAbA,UAAa,CACjBC,MADiB,EAEjBN,WAFiB;AAAA;AAAA;AAAA;AAAA;AAAA,iBAIbA,WAAW,CAACO,IAAZ,EAJa;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAKT5C,mBAAmB,CAAC2C,MAAD,EAASN,WAAT,CALV;;AAAA;AAAA,0BAMfD,QANe;AAAA,0BAMNhC,OANM;AAAA;AAAA,6CAMQL,iBAAiB,CAAC4C,MAAD,CANzB;;AAAA;AAAA;AAAA;AAAA;AAOfP,YAAAA,QAAQ,CAACjC,cAAc,CAAC,EAAD,CAAf,CAAR;AAPe;AAAA;;AAAA;AASf0C,YAAAA,KAAK,2CAAL;;AATe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAaA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEV,OAAO,CAACpB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,SAAS,EAAEoB,OAAO,CAAChB,KADrB;AAEE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6BACPiB,QADO;AAAA,6BACEhC,OADF;AAAA;AAAA,+CACgBL,iBAAiB,CAACyC,IAAI,CAACM,EAAN,CADjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,IAAI,CAACO,KAAV,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIP,IAAI,CAACQ,IAAT,CAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,IAAI,CAACS,QAAL,GACCT,IAAI,CAACS,QAAL,CAAcC,GAAd,CAAkB,UAACC,OAAD;AAAA,WAChB;AAAK,MAAA,GAAG,EAAEA,OAAO,CAACL,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBK,OAAO,CAACH,IAA/B,CADgB;AAAA,GAAlB,CADD,GAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANJ,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,EAAE,EAAC,6BADL;AAEE,IAAA,SAAS,EAAEb,OAAO,CAACvB,SAFrB;AAGE,IAAA,KAAK,EAAC,aAHR;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAC,KALV;AAME,IAAA,SAAS,MANX;AAOE,IAAA,WAAW,EAAC,uBAPd;AAQE,IAAA,YAAY,EAAEyB,WARhB;AASE,IAAA,QAAQ,EAAE,kBAAAe,CAAC;AAAA,aAAIhB,QAAQ,CAACjC,cAAc,CAACiD,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf,CAAZ;AAAA,KATb;AAUE,IAAA,OAAO,EAAC,UAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMZ,UAAU,CAACF,IAAI,CAACM,EAAN,EAAUT,WAAV,CAAhB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAbF,CARF,CARF,CADF,CADF,CADF;AAyCD,CA/DD;;AAiEAH,QAAQ,CAACqB,eAAT,GAA2B,kBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBV,UAAAA,EADiB,GACVU,OAAO,CAACC,KADE,CACjBX,EADiB;AAAA;AAAA,2CAEN/C,iBAAiB,CAAC,CAAC+C,EAAF,CAFX;;AAAA;AAEnBN,UAAAA,IAFmB;AAGzBgB,UAAAA,OAAO,CAACE,KAAR,CAActB,QAAd,CAAuBhC,OAAO,CAACoC,IAAD,CAA9B;AAHyB,4CAIlB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAOA,eAAeN,QAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport { NextPage, NextPageContext } from 'next';\nimport { getPostFromServer, sendCommentOnServer } from '../../api';\nimport { Comment } from '../../types';\nimport { useDispatch, useSelector, RootStateOrAny } from 'react-redux';\nimport { setCommentBody, setPost } from '../../store/actions';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, TextField } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    textField: {\n      maxWidth: '60%',\n      justifyContent: 'center',\n    },\n    root: {\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    paper: {\n      display: 'flex',\n      flexFlow: 'column no',\n      minHeight: '60vh',\n      maxWidth: '90vw',\n      marginTop: '20px',\n      marginRight: '20px',\n      marginLeft: '20px',\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.primary,\n      outline: 'none',\n      cursor: 'pointer',\n    },\n  }),\n);\n\nconst PostPage: NextPage = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const commentBody = useSelector(\n    (state: RootStateOrAny) => state.inputs.commentBody,\n  );\n  const post = useSelector((state: RootStateOrAny) => state.posts.post);\n\n  const addComment = async (\n    postId: number | undefined,\n    commentBody: string,\n  ) => {\n    if (commentBody.trim()) {\n      await sendCommentOnServer(postId, commentBody);\n      dispatch(setPost(await getPostFromServer(postId)));\n      dispatch(setCommentBody(''));\n    } else {\n      alert(`Your comment is empty, please, fill it.`);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Paper\n          className={classes.paper}\n          onClick={async () =>\n            dispatch(setPost(await getPostFromServer(post.id)))\n          }\n        >\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n          <div>\n            {post.comments ? (\n              post.comments.map((comment: Comment) => (\n                <div key={comment.id}>{comment.body}</div>\n              ))\n            ) : (\n              <span>No comments yet</span>\n            )}\n            <div>\n              <TextField\n                id=\"outlined-multiline-flexible\"\n                className={classes.textField}\n                label=\"New comment\"\n                multiline\n                rowsMax=\"100\"\n                fullWidth\n                placeholder=\"Add your comment here\"\n                defaultValue={commentBody}\n                onChange={e => dispatch(setCommentBody(e.target.value))}\n                variant=\"outlined\"\n              />\n              <Button onClick={() => addComment(post.id, commentBody)}>\n                Add new comment\n              </Button>\n            </div>\n          </div>\n        </Paper>\n      </div>\n    </Layout>\n  );\n};\n\nPostPage.getInitialProps = async function(context: NextPageContext) {\n  const { id } = context.query;\n  const post = await getPostFromServer(+id);\n  context.store.dispatch(setPost(post));\n  return { post };\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}