{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport { setPosts } from './store/actions';\nexport var baseURL = 'https://simple-blog-api.crew.red';\nexport var api = axios.create({\n  baseURL: baseURL,\n  timeout: 1000,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\nexport var getPostFromServer = function getPostFromServer(postId) {\n  var data;\n  return _regeneratorRuntime.async(function getPostFromServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(api.get(baseURL + '/posts/' + postId + '?_embed=comments').then(function (_ref) {\n            var data = _ref.data;\n            return data;\n          }));\n\n        case 2:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var sendCommentOnServer = function sendCommentOnServer(postId, commentBody) {\n  return _regeneratorRuntime.async(function sendCommentOnServer$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(api.post(baseURL + '/comments', {\n            postId: postId,\n            body: commentBody\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var sendPostOnServer = function sendPostOnServer(title, body) {\n  return _regeneratorRuntime.async(function sendPostOnServer$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(api.post(baseURL + '/posts', {\n            title: title,\n            body: body\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var getPostsFromServer = function getPostsFromServer() {\n  var data;\n  return _regeneratorRuntime.async(function getPostsFromServer$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(api.get(baseURL + '/posts').then(function (_ref2) {\n            var data = _ref2.data;\n            return data;\n          }));\n\n        case 2:\n          data = _context4.sent;\n          return _context4.abrupt(\"return\", data);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var removePostFromServer = function removePostFromServer(id) {\n  return _regeneratorRuntime.async(function removePostFromServer$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(api[\"delete\"](baseURL + '/posts/' + id));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\nexport var test = function test() {\n  return function (dispatch) {\n    return api.get(baseURL + '/posts').then(function (_ref3) {\n      var data = _ref3.data;\n      return data;\n    }).then(function (posts) {\n      return dispatch(setPosts(posts));\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}