{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport { sendPostOnServer, getPostsFromServer } from '../../api';\nimport { setPostTitle, setPostBody, setPosts } from '../../store/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    textField: {\n      minWidth: '60%',\n      '& .outlined-textarea': {\n        minHeight: '300px'\n      }\n    },\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      alignItems: 'center',\n      marginTop: '30vh',\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200\n      }\n    }\n  });\n});\n\nvar New = function New() {\n  var classes = useStyles();\n  var postsBody = useSelector(function (state) {\n    return state.inputs.postBody;\n  });\n  var postsTitle = useSelector(function (state) {\n    return state.inputs.postTitle;\n  });\n  var dispatch = useDispatch();\n\n  var addNewPost = function addNewPost(title, body) {\n    return _regeneratorRuntime.async(function addNewPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(title.trim() && body.trim())) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(sendPostOnServer(title, body));\n\n          case 3:\n            dispatch(setPostBody(''));\n            dispatch(setPostTitle(''));\n            _context.t0 = dispatch;\n            _context.t1 = setPosts;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(getPostsFromServer());\n\n          case 9:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            (0, _context.t0)(_context.t3);\n            _context.next = 15;\n            break;\n\n          case 14:\n            alert('Please, fill all input fields');\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  return __jsx(Layout, null, __jsx(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\"\n  }, __jsx(TextField, {\n    id: \"outlined-textarea\",\n    className: classes.textField,\n    defaultValue: postsTitle,\n    placeholder: \"add name for your post\",\n    onChange: function onChange(e) {\n      return dispatch(setPostTitle(e.target.value));\n    },\n    label: \"Title\",\n    multiline: true,\n    variant: \"outlined\"\n  }), __jsx(TextField, {\n    id: \"outlined-multiline-flexible\",\n    className: classes.textField,\n    label: \"Text\",\n    multiline: true,\n    rowsMax: \"100\",\n    fullWidth: true,\n    placeholder: \"what is on your mind?\",\n    defaultValue: postsBody,\n    onChange: function onChange(e) {\n      return dispatch(setPostBody(e.target.value));\n    },\n    variant: \"outlined\"\n  }), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return addNewPost(postsTitle, postsBody);\n    }\n  }, \"Submit\"))));\n};\n\nexport default New;","map":null,"metadata":{},"sourceType":"module"}