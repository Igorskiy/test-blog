{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_COMMENT } from '../types';\nconst initialState = {\n  comment: {}\n};\nexport const commentReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_COMMENT:\n      return _objectSpread({}, state, {\n        comment: action.comment\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/projects/test-blog/store/commentReducer.ts"],"names":["SET_COMMENT","initialState","comment","commentReducer","state","action","type"],"mappings":";;;;;;AAAA,SAA2BA,WAA3B,QAA8C,UAA9C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAA2C;AACvE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,+BAAYI,KAAZ;AAAmBF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAAnC;;AACF;AACE,aAAOE,KAAP;AAJJ;AAMD,CAPM","sourcesContent":["import { Actions, Comment, SET_COMMENT } from '../types';\n\nconst initialState = {\n  comment: {} as Comment,\n};\n\nexport const commentReducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case SET_COMMENT:\n      return { ...state, comment: action.comment };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}